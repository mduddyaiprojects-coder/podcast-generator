import { 
  validateAudioFile, 
  calculateEstimatedDuration,
  getPodcastAudioSettings,
  detectAudioMimeType,
  estimateAudioFileSize,
  getOptimalBitrate
} from '../../src/utils/audio-utils';

describe('AudioUtils Integration', () => {
  describe('Integration with podcast generation workflow', () => {
    it('should work with typical podcast content', async () => {
      // Simulate a typical podcast script
      const podcastScript = `
        Welcome to today's podcast episode. Today we're discussing the latest trends in technology.
        This is a sample script that would typically be generated by our AI system.
        The content should be engaging and informative for our listeners.
      `.trim();

      // Calculate estimated duration
      const estimatedDuration = calculateEstimatedDuration(podcastScript.length);
      expect(estimatedDuration).toBeGreaterThan(0);

      // Get podcast settings
      const settings = getPodcastAudioSettings();
      expect(settings.targetBitrate).toBe(128);

      // Estimate file size
      const estimatedSize = estimateAudioFileSize(estimatedDuration, settings.targetBitrate!);
      expect(estimatedSize).toBeGreaterThan(0);

      // Get optimal bitrate for different qualities
      const lowBitrate = getOptimalBitrate('low', 'audio/mpeg');
      const highBitrate = getOptimalBitrate('high', 'audio/mpeg');
      
      expect(highBitrate).toBeGreaterThan(lowBitrate);
    });

    it('should handle different audio formats', () => {
      const formats = ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp4'];
      
      formats.forEach(format => {
        const bitrate = getOptimalBitrate('medium', format);
        expect(bitrate).toBeGreaterThan(0);
      });
    });

    it('should detect various audio file extensions', () => {
      const testCases = [
        { filename: 'episode1.mp3', expected: 'audio/mpeg' },
        { filename: 'episode2.wav', expected: 'audio/wav' },
        { filename: 'episode3.ogg', expected: 'audio/ogg' },
        { filename: 'episode4.m4a', expected: 'audio/mp4' },
        { filename: 'episode5.webm', expected: 'audio/webm' },
        { filename: 'episode6.flac', expected: 'audio/flac' }
      ];

      testCases.forEach(({ filename, expected }) => {
        const detected = detectAudioMimeType(filename);
        expect(detected).toBe(expected);
      });
    });

    it('should validate audio files with realistic sizes', async () => {
      // Create a realistic audio buffer (simulate 1MB MP3)
      const realisticAudioBuffer = Buffer.alloc(1024 * 1024, 0x00);
      
      const result = await validateAudioFile(realisticAudioBuffer, 'episode.mp3', 'audio/mpeg');
      
      expect(result.valid).toBe(true);
      expect(result.metadata).toBeDefined();
      expect(result.metadata!.size).toBe(1024 * 1024);
    });
  });

  describe('Error handling and edge cases', () => {
    it('should handle very large files gracefully', async () => {
      // Create a buffer that exceeds the maximum size
      const largeBuffer = Buffer.alloc(200 * 1024 * 1024); // 200MB
      
      const result = await validateAudioFile(largeBuffer, 'large.mp3', 'audio/mpeg');
      
      expect(result.valid).toBe(false);
      expect(result.errors.some(error => error.includes('too large'))).toBe(true);
    });

    it('should handle very short text for duration calculation', () => {
      const shortText = 'Hi there, this is a short message that should have some duration';
      const duration = calculateEstimatedDuration(shortText.length);
      
      expect(duration).toBeGreaterThan(0);
      expect(duration).toBeLessThan(10); // Should be very short
    });

    it('should handle very long text for duration calculation', () => {
      const longText = 'A'.repeat(10000); // 10KB of text
      const duration = calculateEstimatedDuration(longText.length);
      
      expect(duration).toBeGreaterThan(0);
      expect(duration).toBeGreaterThan(100); // Should be several minutes
    });
  });
});
