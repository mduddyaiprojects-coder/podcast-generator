{
  "name": "Error Handling Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "handle-error",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Error Handling Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "error-handling-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Process and categorize error\nconst { submission_id, error_type, error_message, context, severity } = $input.first().json;\n\nconsole.error('n8n: Processing error:', { submission_id, error_type, error_message, severity });\n\n// Basic validation\nif (!submission_id || !error_type || !error_message) {\n  throw new Error('Missing required fields: submission_id, error_type, error_message');\n}\n\n// Categorize error severity\nconst errorSeverity = severity || 'medium';\nconst validSeverities = ['low', 'medium', 'high', 'critical'];\nif (!validSeverities.includes(errorSeverity)) {\n  console.warn(`Invalid severity level: ${errorSeverity}. Defaulting to medium.`);\n}\n\n// Determine if retry is appropriate\nconst retryableErrors = ['timeout', 'network', 'rate_limit', 'temporary'];\nconst shouldRetry = retryableErrors.some(type => error_type.toLowerCase().includes(type));\n\n// Prepare error data\nconst errorData = {\n  submission_id,\n  error_type,\n  error_message,\n  context: context || {},\n  severity: errorSeverity,\n  should_retry: shouldRetry,\n  timestamp: new Date().toISOString(),\n  workflow_source: 'n8n-error-handling'\n};\n\nreturn { json: errorData };"
      },
      "id": "process-error",
      "name": "Process Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-retry",
              "leftValue": "={{$json.should_retry}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "retry-gate",
      "name": "Should Retry?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Log error to Azure Functions for tracking\nconst errorData = $input.first().json;\n\nconsole.log('n8n: Logging error to Azure Functions:', errorData);\n\n// Prepare error log request\nconst logRequest = {\n  submission_id: errorData.submission_id,\n  error_type: errorData.error_type,\n  error_message: errorData.error_message,\n  context: errorData.context,\n  severity: errorData.severity,\n  should_retry: errorData.should_retry,\n  timestamp: errorData.timestamp,\n  workflow_source: 'n8n-error-handling'\n};\n\nreturn { json: logRequest };"
      },
      "id": "prepare-log-request",
      "name": "Prepare Log Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "https://your-azure-functions-app.azurewebsites.net/api/errors/log",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Workflow-Source",
              "value": "n8n-error-handling"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "submission_id",
              "value": "={{$json.submission_id}}"
            },
            {
              "name": "error_type",
              "value": "={{$json.error_type}}"
            },
            {
              "name": "error_message",
              "value": "={{$json.error_message}}"
            },
            {
              "name": "context",
              "value": "={{JSON.stringify($json.context)}}"
            },
            {
              "name": "severity",
              "value": "={{$json.severity}}"
            },
            {
              "name": "should_retry",
              "value": "={{$json.should_retry}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "log-error-to-api",
      "name": "Log Error to API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "functionCode": "// Handle retry logic\nconst errorData = $input.first().json;\n\nconsole.log('n8n: Preparing retry for error:', errorData);\n\n// Simple retry logic - in a real implementation, this would be more sophisticated\nconst retryData = {\n  ...errorData,\n  retry_attempt: 1,\n  max_retries: 3,\n  retry_delay: 5000, // 5 seconds\n  retry_scheduled: true\n};\n\nreturn { json: retryData };"
      },
      "id": "prepare-retry",
      "name": "Prepare Retry",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "functionCode": "// Merge error handling results\nconst errorData = $input.first().json;\nconst logResponse = $('Log Error to API').item?.json || {};\n\nconsole.log('n8n: Error handling completed:', errorData);\n\n// Prepare final response\nconst finalResponse = {\n  success: true,\n  message: 'Error handled successfully',\n  submission_id: errorData.submission_id,\n  error_type: errorData.error_type,\n  severity: errorData.severity,\n  logged: !logResponse.error,\n  retry_prepared: errorData.retry_scheduled || false,\n  timestamp: new Date().toISOString()\n};\n\nreturn { json: finalResponse };"
      },
      "id": "merge-results",
      "name": "Merge Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json)}}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "functionCode": "// Handle error in error handling workflow\nconst error = $input.first().json;\n\nconsole.error('n8n: Error in error handling workflow:', error);\n\n// Return error response\nreturn {\n  json: {\n    success: false,\n    error: 'Error handling workflow failed',\n    original_error: error.message || 'Unknown error',\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "error-handler-error",
      "name": "Error Handler Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json)}}",
        "responseCode": 500
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 500]
    }
  ],
  "connections": {
    "Error Handling Webhook": {
      "main": [
        [
          {
            "node": "Process Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Error": {
      "main": [
        [
          {
            "node": "Retry Gate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retry Gate": {
      "main": [
        [
          {
            "node": "Prepare Log Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Log Request": {
      "main": [
        [
          {
            "node": "Log Error to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error to API": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Retry": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler Error": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "error-handling-workflow",
  "tags": ["error", "handling", "logging", "retry", "automation"]
}
